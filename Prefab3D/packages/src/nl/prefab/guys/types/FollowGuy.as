//Prefab3D. www.closier.nl/prefab .  Fabrice Closier 2012package nl.prefab.guys.types{	import nl.prefab.guys.Guy;	import nl.prefab.guys.data.PropertyData;	import nl.prefab.guys.data.GuysTypes;	import nl.prefab.guys.events.GuyEvent;		import away3d.core.base.Object3D;	import away3d.containers.ObjectContainer3D;	import away3d.entities.Mesh;		import flash.utils.getTimer;	import flash.geom.Vector3D;		public class FollowGuy extends Guy	{		public function FollowGuy(id:String){			super(id, GuysTypes.ANIMATION_FOLLOW, false);		}  		public override function update():void		{			var property:PropertyData;			var obj:Object;			var j:uint;			var direction:Vector3D;			var posTarget:Vector3D;			var dist:Number;			var factor:Number;			var percent:Number;			var propertyRestored:Boolean;						for(var i:uint = 0;i<properties.length;++i){				property = properties[i];				if(!property.active) continue;								propertyRestored = property.restored;								for(j = 0;j<targets.length;++j){										obj = targets[j].object;					if(!obj || !property.lookAtObject || property.lookAtObject == obj) continue;										if(propertyRestored && !isNaN(property.value) ){						obj[property.name] = property.value;						dispatchGuyEvent(GuyEvent.RESET, property);					}										if(property.lookAtObject is ObjectContainer3D || property.lookAtObject is Mesh){						posTarget = Vector3D(property.lookAtObject.position);					} else if(property.lookAtObject is Vector3D){						posTarget = Vector3D(property.lookAtObject);					}					//to do, make sure registering for this guy is an object3d					Object3D(obj).lookAt(posTarget);					 					dist = Vector3D.distance(obj.position, posTarget);					 					if( (dist < property.range || property.range == 0) && dist > property.distance){						direction = posTarget.subtract(obj.position);						direction.normalize();						percent = dist/(dist-property.distance);						if(percent >1) percent = 1;												factor = property.updateValue*(percent);						 						obj.x += direction.x*factor;						obj.y += direction.y*factor;						obj.z += direction.z*factor;					}										if(dist <= property.distance && hasEventListener(GuyEvent.REACH)){						dispatchGuyEvent(GuyEvent.REACH, property);					}				}								if(propertyRestored)					property.restored = false;			}		}				public function addProperty(followTarget:Object, distance:Number, range:Number = 0, maxUpdatevalue:Number = 1):PropertyData 		{			var propertyData:PropertyData = new PropertyData(this);			propertyData.name = "followguy"+getTimer();			propertyData.lookAtObject = followTarget;			propertyData.range = (range<0)? 0 : range;			propertyData.distance = distance;			propertyData.updateValue = maxUpdatevalue;			 			addPropertyData(propertyData);			 			return propertyData;		}			}}