//Prefab3D. www.closier.nl/prefab .  Fabrice Closier 2012package nl.prefab.guys.types{	import nl.prefab.guys.Guy;	import nl.prefab.guys.data.PropertyData;	import nl.prefab.guys.data.GuysTypes;	import nl.prefab.guys.events.GuyEvent;		import flash.utils.getTimer;		public class TweenGuy extends Guy	{		public function TweenGuy(id:String){			super(id, GuysTypes.ANIMATION_TWEEN, true);		}		public override function update():void		{			var property:PropertyData;			var obj:Object;			var j:uint;			var nowTime:int = getTimer();			var norm:Number;			var easedVal:Number;			var propertyRestored:Boolean;			var sequenceChange:Boolean;						for(var i:uint = 0;i<properties.length;++i){				property = properties[i];				propertyRestored = property.restored;								if(propertyRestored && !isNaN(property.value) ){					//obj[property.name] = property.value;					property.currentTime = property.destTime = 0;					property.state = 1;					dispatchGuyEvent(GuyEvent.RESET, property);				}								if(!property.active || property.state == 0) continue;								sequenceChange = false;								for(j = 0;j<targets.length;++j){											obj = targets[j].object;										if(!obj) continue;										if(property.state == 1 && property.destTime == 0)						property.destTime = nowTime + property.duration;										property.currentTime = property.duration-(property.destTime-nowTime);					norm = property.currentTime/property.duration;										//in case time exceeds one frame stack					if(norm>1) norm = 1;					 					if(property.playReverse) norm = 1-norm;					 					try {												easedVal = property.easingMethod(norm, 0, 1, 1);						obj[property.name] = property.value*(1-easedVal)+property.destValue*easedVal;						 						if(nowTime-property.destTime >= 0){														if(chain){								sequenceChange = true;							} else {																if(property.loop){									 									if(property.reverse){										property.playReverse = !property.playReverse;																				if(property.playReverse){											dispatchGuyEvent(GuyEvent.REVERSE, property);										} else{											dispatchGuyEvent(GuyEvent.LOOP, property);										}																			} else{										dispatchGuyEvent(GuyEvent.LOOP, property);									}																		property.state = 1;									property.destTime = 0;																	} else {									 									property.state = 0;								}							}						}											} catch(e:Error) {												trace("Property \""+property.name+"\" not found on this object");						continue;					}									}								if(sequenceChange){					property.active = false;					property.state = 0;										if(i<properties.length-1){												properties[i+1].active = true;						properties[i+1].currentTime = properties[i+1].destTime = 0;						properties[i+1].state = 1;											} else if(chainLoop){												properties[0].active = true;						properties[0].state = 1;						properties[0].currentTime = properties[0].destTime = 0;						//restore();											} else {												dispatchGuyEvent(GuyEvent.DONE, property);					}										dispatchGuyEvent(GuyEvent.SEQUENCE_CHANGE, property);				}												if(propertyRestored)					property.restored = false;			}		}				public function addProperty(name:String, value:Number, destValue:Number, loop:Boolean, duration:Number = 1000, easingMethodIndex:uint = 0, reverse:Boolean = false):PropertyData 		{			var propertyData:PropertyData = new PropertyData(this);			propertyData.name = name;			propertyData.value = value;			propertyData.loop = loop;			propertyData.destValue = destValue;						var easingMethod:Function = getEasingMethodFromIndex(easingMethodIndex);			propertyData.easingMethodIndex = easingMethodIndex;			propertyData.easingMethod = easingMethod;			propertyData.reverse = reverse;			propertyData.currentTime = 0;			propertyData.destTime = 0;			propertyData.duration = duration;			//state = 0:has tweened, 1:to be tweened			propertyData.state = 1;						addPropertyData(propertyData);			 			return propertyData;		}			}}